@mixin breakpoint-scale($size, $scale: "down") {
  $breakpoint: map-get($breakpoints, $size);
  $media-feature: if($scale == "down", max-width, min-width);

  @if $breakpoint {
    @media screen and ($media-feature: map-get($breakpoints, $size) + px) {
      @content;
    }
  } @else {
    @warn "Unfortunately, no value could be retrieved from `#{$size}`. "
        + "Available breakpoints are: #{map-keys($breakpoints)}.";
    @content;
  }
}

@mixin breakpoint-down($size) {
  @include breakpoint-scale($size, "down") {
    @content;
  }
}

@mixin breakpoint-up($size) {
  @include breakpoint-scale($size, "up") {
    @content;
  }
}

@mixin authentication {
  .a {
    display: none;
  }
}

@mixin spacing($size, $abbrev, $prop, $length) {
  .#{$abbrev}-#{$size} {
    #{$prop}: $length;
  }

  .#{$abbrev}t-#{$size},
  .#{$abbrev}y-#{$size} {
    #{$prop}-top: $length;
  }

  .#{$abbrev}b-#{$size},
  .#{$abbrev}y-#{$size} {
    #{$prop}-bottom: $length;
  }

  .#{$abbrev}l-#{$size},
  .#{$abbrev}x-#{$size} {
    #{$prop}-left: $length;
  }

  .#{$abbrev}r-#{$size},
  .#{$abbrev}x-#{$size} {
    #{$prop}-right: $length;
  }
}

@mixin size-generator($displays, $prefix: "size", $props) {
  @each $size in $sizes {
    @if map-has-key($displays, $size) {
      $display: map-get($displays, $size);

      .#{"" + $prefix}--#{$size} {
        @if type-of($props) == "list" {
          @each $prop in $props {
            #{'' + $prop}: $display;
          }
        } @else {
          #{'' + $props}: $display;
        }
      }
    }
  }
}

@mixin css-generator($collection, $prefix: null, $props: null) {
  @if type-of($collection) != "map" and type-of($collection) != "list" {
    @error "'Error in 'enumStyle' mixin first paramter `$map` must be assigned a valid 'map' or 'list' type";
  } @else if $prefix == null {
    @error "'Error in 'enumStyle' mixin second paramter `$prefix` must be assigned a valid 'string' type";
  } @else {
    @if type-of($collection) == "map" {
      @each $name, $value in $collection {
        .#{$prefix}--#{"" + $name} {
          @if ($props == null) {
            #{'' + $prefix}: $value;
          } @else if type-of($props) == "list" {
            @each $prop in $props {
              #{'' + $prop}: $value;
            }
          } @else {
            #{'' + $props}: $value;
          }
        }
      }
    } @else {
      @each $name in $collection {
        .#{$prefix}--#{"" + $name} {
          @if ($props == null) {
            #{'' + $prefix}: $name;
          } @else if type-of($props) == "list" {
            @each $prop in $props {
              #{'' + $prop}: $name;
            }
          } @else {
            #{'' + $props}: $name;
          }
        }
      }
    }
  }
}

@mixin type-scale-generator() {
  $reversed-breakpoints: reverse($breakpoints);

  @each $size, $scale-ratio in map-get($type-scale, default) {
    $value: max($font-base-size * $scale-ratio, $min-font-size);

    .fs--#{$size} {
      font-size: $value;
      line-height: 1.2;
    }
  }

  @each $breakpoint, $viewport in $reversed-breakpoints {
    @include breakpoint-down($breakpoint) {
      @if (map-has-key($type-scale, $breakpoint)) {
        $type-by-breakpoint: map-get($type-scale, $breakpoint);

        @if type-of($type-by-breakpoint) == "map" {
          @each $size, $scale-ratio in $type-by-breakpoint {
            $value: max($font-base-size * $scale-ratio, $min-font-size);

            .fs--#{$size} {
              font-size: $value;
              line-height: 1.2;
            }
          }
        }

        @if type_of($type-by-breakpoint) == number {
          @each $size, $scale-ratio in map-get($type-scale, default) {
            $value: max($font-base-size * $type-by-breakpoint * $scale-ratio, $min-font-size);

            .fs--#{$size} {
              font-size: $value;
              line-height: 1.2;
            }
          }
        }
      }
    }
  }
}
